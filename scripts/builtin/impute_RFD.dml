 #-------------------------------------------------------------
#
# Copyright 2020 Graz University of Technology
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

# Implements builtin for imputing missing values from observed values (if exist)
# using robust functional dependencies 
# INPUT PARAMETERS:
# ---------------------------------------------------------------------------------------------
# NAME            TYPE    DEFAULT     MEANING
# ---------------------------------------------------------------------------------------------
# F               String    --       Data frame
# Mask            Double    --       A row vector for interested features i.e. Mask =[1, 0, 1]
                                     # will exclude the second column from processing
# threshold       Double    --       threshold value in interval [0, 1] for robust FDs 
# ---------------------------------------------------------------------------------------------


#Output(s)
# ---------------------------------------------------------------------------------------------
# NAME            TYPE    DEFAULT     MEANING
# ---------------------------------------------------------------------------------------------
# imputed_F      String   ---        Frame with possible imputations 

s_impute_RFD = function(Frame[String] F, Matrix[Double] Mask, Double threshold)
  return(Frame[String] imputed_F)
{

  # sanity checks
  if( threshold < 0 | threshold > 1 )
    stop("Stopping due to invalid input, threshold required in interval [0, 1] found "+threshold)

  if(ncol(F) != ncol(Mask))
    stop("Stopping due to dimension mismatch in Matrix and it's Mask")

  if( nrow(Mask) > 1 )
    stop("Stopping due to invalid input, Mask required n * 1 found n * "+nrow(Mask))

  # detect schema for transformation
  schema = detectSchema(F)
  s=""
  for(i in 1: ncol(schema))
  {
    if(as.scalar(schema[1,i]) == "STRING" | as.scalar(schema[1,i]) == "BOOLEAN" )
      s = s+as.integer(i)+","; 
  }
  
  # recode data frame
  jspecR = "{ids:true, recode:["+s+"]}";
  [tX, M] = transformencode(target=F, spec=jspecR);

  # feature pruning using mask (keep interested features only for FD discovery)
  FDs = discoverFD(tX, Mask, threshold)
  tX = replace(target = tX, pattern=NaN, replacement=0)
  X = removeEmpty(target = tX, margin = "cols", select=Mask)
  
  n = nrow(FDs)
  d = ncol(FDs)
  
  for(i in 1:n) {
    for(j in 1:d) {
      if(as.scalar(FDs[i, j]) != 0) {
        X[,j] = impute(X[,i], X[,j]) # if there exist a FD (A -> B) then impute B using A
        FDs[,j] = matrix(0,nrow(FDs),1)
      }
    }
  }
  
  p = table((seq(1, ncol(X))) , (removeEmpty(target = t(Mask)*seq(1, ncol(Mask)), margin ="rows")), 1,ncol(X), ncol(F))
  q = tX * (1-Mask)
  X_full = (X %*% p)+q;

  # getting the actual data back
  dF = transformdecode(target=X_full, spec=jspecR, meta=M);
  imputed_F = dF;
}

impute = function(Matrix[Double] X, Matrix[Double] Y)
  return(Matrix[Double] imputed_Y) {
  # sanity checks
  XY = cbind(X, Y)
  missing_mask = (XY == 0)
  if(sum(missing_mask[,2]) > 0)
  {
    # map the missing values to an arbitrary number (i.e., Max values + 1)
    XY = missing_mask * (colMaxs(XY)+1) + XY
    # create mapping between X and Y
    ctab = table(XY[,1], XY[,2], 1)
    # remove the table column representing missing values
    ctab = ctab[,1:ncol(ctab)-1]
    vector = t(seq(1, ncol(ctab)))
    # Get the most frequent mapped value of Y 
    ans = (ctab == rowMaxs(ctab)) * vector
    tabMax = rowSums(ans) != (ncol(ans) * ((ncol(ans))+1)/2)
    filled = rowMaxs(ans) * tabMax 
    for(i in 1:nrow(X), check = 0)
    {
      index = as.scalar(XY[i,1])
      # XY[i,2] = as.scalar(filled[index,1])
      Y[i,1] = as.scalar(filled[index,1])
    }
    
  }
   
  imputed_Y = Y
}
